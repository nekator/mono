/*
 * This script can be used to update the icon type for all components using icons.
 */

import { readdirSync, lstatSync, writeFileSync } from 'node:fs';

const foundationAssetsPath = '../foundations/assets/icons/functional/images';

const generateIconTypes = () => {
	try {
		const allIcons = [];
		const icons = readdirSync(foundationAssetsPath)
			.reduce((previousValue, currentValue) => {
				const path_string = `${foundationAssetsPath}/${currentValue}`;

				if (
					currentValue.includes('.svg') ||
					!lstatSync(path_string).isDirectory()
				) {
					return previousValue;
				}

				let iconPaths = readdirSync(path_string);

				return [
					...previousValue,
					`// Directory: ${currentValue}`,
					...iconPaths
				];
			}, [])
			.filter(
				(icon) =>
					(!icon.includes('_inverted') &&
						!icon.includes('_filled') &&
						icon.includes('_24')) ||
					icon.startsWith('//')
			)
			.map((icon) =>
				icon
					.replace('db_ic_', '')
					.replace('_24.svg', '')
					.replace(/-/g, '_')
			)
			.map((icon) => {
				if (icon.startsWith('//')) {
					return icon;
				}

				allIcons.push(icon);

				return `| '${icon}'`;
			});

		const generatedDisclaimer =
			'/* This file was generated by packages/components/scripts/generate-icon-types.js */\n';
		const iconTypes = `${generatedDisclaimer}export type IconTypes = string \n ${icons.join(
			'\n'
		)}`;
		const allIconsFile = `${generatedDisclaimer}export const ALL_ICONS: string[] = ${JSON.stringify(
			allIcons
		)};`;
		writeFileSync('./src/shared/icon-types.ts', iconTypes);
		writeFileSync('./src/shared/all-icons.ts', allIconsFile);
	} catch (e) {
		console.log(e);
	}
};

generateIconTypes();
